// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //MUX16
    Mux16(a[0..14]=instruction[0..14],b=ALUoutput,sel=instruction[15],out=instructionMuxOut);
    //A register
    //To know laod bit, Have to understand the role of load bit.
    //Value of A register is changed when @ instruction or there is A in C instruction.
    //Should not be changed in situation like C instruction ( D = D + 1; )
    //When Destination of c instruction is A ( A = D + 1; )
    //Order of A,M,D in c instruction is in Unit 4.4 6:30 
    Not(in=instruction[15],out=NotInstruction15);
    And(a=instruction[3],b=instruction[15],out=writeM);
    Or(a=NotInstruction15,b=instruction[5],out=ARegisterLoadBit);
    ARegister(in=instructionMuxOut,load=ARegisterLoadBit,out=ARegisterOut, out[0..14]=addressM);
    //MUX16
    //Unit 5.3 14:20, ALU has two input ( one is D register, and the other is A register or M )
    //According to Unit 4.4 6:07, There is no comp like A + M )
    Mux16(a=ARegisterOut,b=inM,sel=instruction[12],out=AOrMMuxOut);
    //D register
    //Order of A,M,D in c instruction is in Unit 4.4 6:30 
    //zr and ng can be used in JUMP condition 
    And(a=instruction[15],b=instruction[4],out=DRegisterLoad);
    DRegister(in=ALUoutput,load=DRegisterLoad,out=DRegisterOut);
    //ALU
    ALU(x=DRegisterOut,y=AOrMMuxOut, zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=ALUoutput, out=outM ,zr=ALUzr ,ng=ALUng );
    //PC
    //inc is always true
    Not(in=ALUng,out=notng);
    Not(in=ALUzr,out=notzr);
    And(a=notng,b=notzr,out=notngAndnotzr);
    And(a=instruction[0], b=notngAndnotzr, out=j3);
    And(a=instruction[1], b=ALUzr, out=j2);
    And(a=instruction[2], b=ALUng, out=j1);
    Or(a=j1,b=j2,out=j1Orj2);
    Or(a=j1Orj2,b=j3,out=j1Orj2Orj3);
    And(a=instruction[15],b=j1Orj2Orj3,out=jumpLoad);
    PC(in=ARegisterOut, load=jumpLoad, inc=true, reset=reset, out[0..14]=pc);
}
