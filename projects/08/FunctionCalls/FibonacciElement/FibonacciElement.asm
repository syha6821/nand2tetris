//bootstrap code
@256
D=A;
@0
M=D;
@1
M=-A;
@2
M=-A;
@3
M=-A;
@4
M=-A;
@FibonacciElement.Sys.init$ret.1
D=A;
@SP
M=M+1;
A=M-1;
M=D;
@LCL
D=M
@SP
M=M+1;
A=M-1;
M=D;
@ARG
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THIS
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THAT
D=M
@SP
M=M+1;
A=M-1;
M=D;
@SP
D=M;
@5
D=D-A;
@0
D=D-A;
@ARG
M=D
@SP
D=M;
@LCL
M=D;
@FibonacciElement.Sys.init
0;JMP
(FibonacciElement.Sys.init$ret.1)
//function Sys.init 0
(FibonacciElement.Sys.init)
//push constant 4
@4
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//call Main.fibonacci 1
@FibonacciElement.Main.fibonacci$ret.1
D=A;
@SP
M=M+1;
A=M-1;
M=D;
@LCL
D=M
@SP
M=M+1;
A=M-1;
M=D;
@ARG
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THIS
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THAT
D=M
@SP
M=M+1;
A=M-1;
M=D;
@SP
D=M;
@5
D=D-A;
@1
D=D-A;
@ARG
M=D
@SP
D=M;
@LCL
M=D;
@FibonacciElement.Main.fibonacci
0;JMP
(FibonacciElement.Main.fibonacci$ret.1)
//label WHILE
(FibonacciElement.Sys.init$WHILE)
//goto (WHILE)
@FibonacciElement.Sys.init$WHILE
0;JMP
//function Main.fibonacci 0
(FibonacciElement.Main.fibonacci)
//push argument 0
@0
D=A;
@ARG
A=M+D;
D=M;
@SP
M=M+1;
A=M-1;
M=D;
//push constant 2
@2
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//lt
@SP
M=M-1;
A=M;
D=M;
@SP
M=M-1;
A=M;
D=D-M;
M=1;
(TRUE1)
@SP
A=M;
M=M-1;
@TRUE1
D=-D;
D;JLT
@SP
M=M+1;
//if go-to (IF_TRUE)
@SP
M=M-1;
A=M;
D=M;
@FibonacciElement.Main.fibonacci$IF_TRUE
D;JNE
//goto (IF_FALSE)
@FibonacciElement.Main.fibonacci$IF_FALSE
0;JMP
//label IF_TRUE
(FibonacciElement.Main.fibonacci$IF_TRUE)
//push argument 0
@0
D=A;
@ARG
A=M+D;
D=M;
@SP
M=M+1;
A=M-1;
M=D;
//return
@LCL
D=M;
@endFrame
M=D;
@5
D=A;
@endFrame
A=M-D;
D=M;
@retAddr
M=D;
@SP
M=M-1;
A=M;
D=M;
@ARG
A=M;
M=D;
@ARG
D=M+1;
@SP
M=D;
@endFrame
A=M-1;
D=M;
@THAT
M=D;
@2
D=A;
@endFrame
A=M-D;
D=M;
@THIS
M=D;
@3
D=A;
@endFrame
A=M-D;
D=M;
@ARG
M=D;
@4
D=A;
@endFrame
A=M-D;
D=M;
@LCL
M=D;
@retAddr
A=M;
0;JMP
//label IF_FALSE
(FibonacciElement.Main.fibonacci$IF_FALSE)
//push argument 0
@0
D=A;
@ARG
A=M+D;
D=M;
@SP
M=M+1;
A=M-1;
M=D;
//push constant 2
@2
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//sub
@SP
M=M-1;
A=M;
D=M;
@SP
M=M-1;
A=M;
M=M-D;
@SP
M=M+1;
//call Main.fibonacci 1
@FibonacciElement.Main.fibonacci$ret.2
D=A;
@SP
M=M+1;
A=M-1;
M=D;
@LCL
D=M
@SP
M=M+1;
A=M-1;
M=D;
@ARG
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THIS
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THAT
D=M
@SP
M=M+1;
A=M-1;
M=D;
@SP
D=M;
@5
D=D-A;
@1
D=D-A;
@ARG
M=D
@SP
D=M;
@LCL
M=D;
@FibonacciElement.Main.fibonacci
0;JMP
(FibonacciElement.Main.fibonacci$ret.2)
//push argument 0
@0
D=A;
@ARG
A=M+D;
D=M;
@SP
M=M+1;
A=M-1;
M=D;
//push constant 1
@1
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//sub
@SP
M=M-1;
A=M;
D=M;
@SP
M=M-1;
A=M;
M=M-D;
@SP
M=M+1;
//call Main.fibonacci 1
@FibonacciElement.Main.fibonacci$ret.3
D=A;
@SP
M=M+1;
A=M-1;
M=D;
@LCL
D=M
@SP
M=M+1;
A=M-1;
M=D;
@ARG
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THIS
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THAT
D=M
@SP
M=M+1;
A=M-1;
M=D;
@SP
D=M;
@5
D=D-A;
@1
D=D-A;
@ARG
M=D
@SP
D=M;
@LCL
M=D;
@FibonacciElement.Main.fibonacci
0;JMP
(FibonacciElement.Main.fibonacci$ret.3)
//add
@SP
M=M-1;
A=M;
D=M;
@SP
M=M-1;
A=M;
M=M+D;
@SP
M=M+1;
//return
@LCL
D=M;
@endFrame
M=D;
@5
D=A;
@endFrame
A=M-D;
D=M;
@retAddr
M=D;
@SP
M=M-1;
A=M;
D=M;
@ARG
A=M;
M=D;
@ARG
D=M+1;
@SP
M=D;
@endFrame
A=M-1;
D=M;
@THAT
M=D;
@2
D=A;
@endFrame
A=M-D;
D=M;
@THIS
M=D;
@3
D=A;
@endFrame
A=M-D;
D=M;
@ARG
M=D;
@4
D=A;
@endFrame
A=M-D;
D=M;
@LCL
M=D;
@retAddr
A=M;
0;JMP
