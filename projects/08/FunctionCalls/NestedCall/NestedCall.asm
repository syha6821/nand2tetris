//bootstrap code
@256
D=A;
@0
M=D;
@1
M=-A;
@2
M=-A;
@3
M=-A;
@4
M=-A;
@NestedCall.Sys.init$ret.1
D=A;
@SP
M=M+1;
A=M-1;
M=D;
@LCL
D=M
@SP
M=M+1;
A=M-1;
M=D;
@ARG
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THIS
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THAT
D=M
@SP
M=M+1;
A=M-1;
M=D;
@SP
D=M;
@5
D=D-A;
@0
D=D-A;
@ARG
M=D
@SP
D=M;
@LCL
M=D;
@NestedCall.Sys.init
0;JMP
(NestedCall.Sys.init$ret.1)
//function Sys.init 0
(NestedCall.Sys.init)
//push constant 4000
@4000
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//pop pointer 0
@SP
M=M-1;
A=M;
D=M;
@THIS
M=D;
//push constant 5000
@5000
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//pop pointer 1
@SP
M=M-1;
A=M;
D=M;
@THAT
M=D;
//call Sys.main 0
@NestedCall.Sys.main$ret.1
D=A;
@SP
M=M+1;
A=M-1;
M=D;
@LCL
D=M
@SP
M=M+1;
A=M-1;
M=D;
@ARG
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THIS
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THAT
D=M
@SP
M=M+1;
A=M-1;
M=D;
@SP
D=M;
@5
D=D-A;
@0
D=D-A;
@ARG
M=D
@SP
D=M;
@LCL
M=D;
@NestedCall.Sys.main
0;JMP
(NestedCall.Sys.main$ret.1)
//pop temp 1
@SP
M=M-1;
A=M;
D=M;
@6
M=D;
//label LOOP
(NestedCall.Sys.init$LOOP)
//goto (LOOP)
@NestedCall.Sys.init$LOOP
0;JMP
//function Sys.main 5
(NestedCall.Sys.main)
@SP
M=M+1;
A=M-1;
M=0;
@SP
M=M+1;
A=M-1;
M=0;
@SP
M=M+1;
A=M-1;
M=0;
@SP
M=M+1;
A=M-1;
M=0;
@SP
M=M+1;
A=M-1;
M=0;
//push constant 4001
@4001
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//pop pointer 0
@SP
M=M-1;
A=M;
D=M;
@THIS
M=D;
//push constant 5001
@5001
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//pop pointer 1
@SP
M=M-1;
A=M;
D=M;
@THAT
M=D;
//push constant 200
@200
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//pop local 1
@LCL
D=M;
@1
D=A+D;
@tmpforpop
M=D;
@SP
M=M-1;
A=M;
D=M;
@tmpforpop
A=M;
M=D;
//push constant 40
@40
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//pop local 2
@LCL
D=M;
@2
D=A+D;
@tmpforpop
M=D;
@SP
M=M-1;
A=M;
D=M;
@tmpforpop
A=M;
M=D;
//push constant 6
@6
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//pop local 3
@LCL
D=M;
@3
D=A+D;
@tmpforpop
M=D;
@SP
M=M-1;
A=M;
D=M;
@tmpforpop
A=M;
M=D;
//push constant 123
@123
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//call Sys.add12 1
@NestedCall.Sys.add12$ret.1
D=A;
@SP
M=M+1;
A=M-1;
M=D;
@LCL
D=M
@SP
M=M+1;
A=M-1;
M=D;
@ARG
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THIS
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THAT
D=M
@SP
M=M+1;
A=M-1;
M=D;
@SP
D=M;
@5
D=D-A;
@1
D=D-A;
@ARG
M=D
@SP
D=M;
@LCL
M=D;
@NestedCall.Sys.add12
0;JMP
(NestedCall.Sys.add12$ret.1)
//pop temp 0
@SP
M=M-1;
A=M;
D=M;
@5
M=D;
//push local 0
@0
D=A;
@LCL
A=M+D;
D=M;
@SP
M=M+1;
A=M-1;
M=D;
//push local 1
@1
D=A;
@LCL
A=M+D;
D=M;
@SP
M=M+1;
A=M-1;
M=D;
//push local 2
@2
D=A;
@LCL
A=M+D;
D=M;
@SP
M=M+1;
A=M-1;
M=D;
//push local 3
@3
D=A;
@LCL
A=M+D;
D=M;
@SP
M=M+1;
A=M-1;
M=D;
//push local 4
@4
D=A;
@LCL
A=M+D;
D=M;
@SP
M=M+1;
A=M-1;
M=D;
//add
@SP
M=M-1;
A=M;
D=M;
@SP
M=M-1;
A=M;
M=M+D;
@SP
M=M+1;
//add
@SP
M=M-1;
A=M;
D=M;
@SP
M=M-1;
A=M;
M=M+D;
@SP
M=M+1;
//add
@SP
M=M-1;
A=M;
D=M;
@SP
M=M-1;
A=M;
M=M+D;
@SP
M=M+1;
//add
@SP
M=M-1;
A=M;
D=M;
@SP
M=M-1;
A=M;
M=M+D;
@SP
M=M+1;
//return
@LCL
D=M;
@endFrame
M=D;
@5
D=A;
@endFrame
A=M-D;
D=M;
@retAddr
M=D;
@SP
M=M-1;
A=M;
D=M;
@ARG
A=M;
M=D;
@ARG
D=M+1;
@SP
M=D;
@endFrame
A=M-1;
D=M;
@THAT
M=D;
@2
D=A;
@endFrame
A=M-D;
D=M;
@THIS
M=D;
@3
D=A;
@endFrame
A=M-D;
D=M;
@ARG
M=D;
@4
D=A;
@endFrame
A=M-D;
D=M;
@LCL
M=D;
@retAddr
A=M;
0;JMP
//function Sys.add12 0
(NestedCall.Sys.add12)
//push constant 4002
@4002
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//pop pointer 0
@SP
M=M-1;
A=M;
D=M;
@THIS
M=D;
//push constant 5002
@5002
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//pop pointer 1
@SP
M=M-1;
A=M;
D=M;
@THAT
M=D;
//push argument 0
@0
D=A;
@ARG
A=M+D;
D=M;
@SP
M=M+1;
A=M-1;
M=D;
//push constant 12
@12
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//add
@SP
M=M-1;
A=M;
D=M;
@SP
M=M-1;
A=M;
M=M+D;
@SP
M=M+1;
//return
@LCL
D=M;
@endFrame
M=D;
@5
D=A;
@endFrame
A=M-D;
D=M;
@retAddr
M=D;
@SP
M=M-1;
A=M;
D=M;
@ARG
A=M;
M=D;
@ARG
D=M+1;
@SP
M=D;
@endFrame
A=M-1;
D=M;
@THAT
M=D;
@2
D=A;
@endFrame
A=M-D;
D=M;
@THIS
M=D;
@3
D=A;
@endFrame
A=M-D;
D=M;
@ARG
M=D;
@4
D=A;
@endFrame
A=M-D;
D=M;
@LCL
M=D;
@retAddr
A=M;
0;JMP
