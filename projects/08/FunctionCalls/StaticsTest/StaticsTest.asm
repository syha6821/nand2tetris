//bootstrap code
@256
D=A;
@0
M=D;
@1
M=-A;
@2
M=-A;
@3
M=-A;
@4
M=-A;
@StaticsTest.Sys.init$ret.1
D=A;
@SP
M=M+1;
A=M-1;
M=D;
@LCL
D=M
@SP
M=M+1;
A=M-1;
M=D;
@ARG
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THIS
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THAT
D=M
@SP
M=M+1;
A=M-1;
M=D;
@SP
D=M;
@5
D=D-A;
@0
D=D-A;
@ARG
M=D
@SP
D=M;
@LCL
M=D;
@StaticsTest.Sys.init
0;JMP
(StaticsTest.Sys.init$ret.1)
//function Sys.init 0
(StaticsTest.Sys.init)
//push constant 6
@6
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//push constant 8
@8
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//call Class1.set 2
@StaticsTest.Class1.set$ret.1
D=A;
@SP
M=M+1;
A=M-1;
M=D;
@LCL
D=M
@SP
M=M+1;
A=M-1;
M=D;
@ARG
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THIS
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THAT
D=M
@SP
M=M+1;
A=M-1;
M=D;
@SP
D=M;
@5
D=D-A;
@2
D=D-A;
@ARG
M=D
@SP
D=M;
@LCL
M=D;
@StaticsTest.Class1.set
0;JMP
(StaticsTest.Class1.set$ret.1)
//pop temp 0
@SP
M=M-1;
A=M;
D=M;
@5
M=D;
//push constant 23
@23
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//push constant 15
@15
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//call Class2.set 2
@StaticsTest.Class2.set$ret.1
D=A;
@SP
M=M+1;
A=M-1;
M=D;
@LCL
D=M
@SP
M=M+1;
A=M-1;
M=D;
@ARG
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THIS
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THAT
D=M
@SP
M=M+1;
A=M-1;
M=D;
@SP
D=M;
@5
D=D-A;
@2
D=D-A;
@ARG
M=D
@SP
D=M;
@LCL
M=D;
@StaticsTest.Class2.set
0;JMP
(StaticsTest.Class2.set$ret.1)
//pop temp 0
@SP
M=M-1;
A=M;
D=M;
@5
M=D;
//call Class1.get 0
@StaticsTest.Class1.get$ret.1
D=A;
@SP
M=M+1;
A=M-1;
M=D;
@LCL
D=M
@SP
M=M+1;
A=M-1;
M=D;
@ARG
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THIS
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THAT
D=M
@SP
M=M+1;
A=M-1;
M=D;
@SP
D=M;
@5
D=D-A;
@0
D=D-A;
@ARG
M=D
@SP
D=M;
@LCL
M=D;
@StaticsTest.Class1.get
0;JMP
(StaticsTest.Class1.get$ret.1)
//call Class2.get 0
@StaticsTest.Class2.get$ret.1
D=A;
@SP
M=M+1;
A=M-1;
M=D;
@LCL
D=M
@SP
M=M+1;
A=M-1;
M=D;
@ARG
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THIS
D=M
@SP
M=M+1;
A=M-1;
M=D;
@THAT
D=M
@SP
M=M+1;
A=M-1;
M=D;
@SP
D=M;
@5
D=D-A;
@0
D=D-A;
@ARG
M=D
@SP
D=M;
@LCL
M=D;
@StaticsTest.Class2.get
0;JMP
(StaticsTest.Class2.get$ret.1)
//label WHILE
(StaticsTest.Sys.init$WHILE)
//goto (WHILE)
@StaticsTest.Sys.init$WHILE
0;JMP
//function Class1.set 0
(StaticsTest.Class1.set)
//push argument 0
@0
D=A;
@ARG
A=M+D;
D=M;
@SP
M=M+1;
A=M-1;
M=D;
//pop static 0
@SP
M=M-1;
A=M;
D=M;
@Class1.vm.0
M=D;
//push argument 1
@1
D=A;
@ARG
A=M+D;
D=M;
@SP
M=M+1;
A=M-1;
M=D;
//pop static 1
@SP
M=M-1;
A=M;
D=M;
@Class1.vm.1
M=D;
//push constant 0
@0
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//return
@LCL
D=M;
@endFrame
M=D;
@5
D=A;
@endFrame
A=M-D;
D=M;
@retAddr
M=D;
@SP
M=M-1;
A=M;
D=M;
@ARG
A=M;
M=D;
@ARG
D=M+1;
@SP
M=D;
@endFrame
A=M-1;
D=M;
@THAT
M=D;
@2
D=A;
@endFrame
A=M-D;
D=M;
@THIS
M=D;
@3
D=A;
@endFrame
A=M-D;
D=M;
@ARG
M=D;
@4
D=A;
@endFrame
A=M-D;
D=M;
@LCL
M=D;
@retAddr
A=M;
0;JMP
//function Class1.get 0
(StaticsTest.Class1.get)
//push static 0
@Class1.vm.0
D=M;
@SP
M=M+1;
A=M-1;
M=D;
//push static 1
@Class1.vm.1
D=M;
@SP
M=M+1;
A=M-1;
M=D;
//sub
@SP
M=M-1;
A=M;
D=M;
@SP
M=M-1;
A=M;
M=M-D;
@SP
M=M+1;
//return
@LCL
D=M;
@endFrame
M=D;
@5
D=A;
@endFrame
A=M-D;
D=M;
@retAddr
M=D;
@SP
M=M-1;
A=M;
D=M;
@ARG
A=M;
M=D;
@ARG
D=M+1;
@SP
M=D;
@endFrame
A=M-1;
D=M;
@THAT
M=D;
@2
D=A;
@endFrame
A=M-D;
D=M;
@THIS
M=D;
@3
D=A;
@endFrame
A=M-D;
D=M;
@ARG
M=D;
@4
D=A;
@endFrame
A=M-D;
D=M;
@LCL
M=D;
@retAddr
A=M;
0;JMP
//function Class2.set 0
(StaticsTest.Class2.set)
//push argument 0
@0
D=A;
@ARG
A=M+D;
D=M;
@SP
M=M+1;
A=M-1;
M=D;
//pop static 0
@SP
M=M-1;
A=M;
D=M;
@Class2.vm.0
M=D;
//push argument 1
@1
D=A;
@ARG
A=M+D;
D=M;
@SP
M=M+1;
A=M-1;
M=D;
//pop static 1
@SP
M=M-1;
A=M;
D=M;
@Class2.vm.1
M=D;
//push constant 0
@0
D=A;
@SP
M=M+1;
A=M-1;
M=D;
//return
@LCL
D=M;
@endFrame
M=D;
@5
D=A;
@endFrame
A=M-D;
D=M;
@retAddr
M=D;
@SP
M=M-1;
A=M;
D=M;
@ARG
A=M;
M=D;
@ARG
D=M+1;
@SP
M=D;
@endFrame
A=M-1;
D=M;
@THAT
M=D;
@2
D=A;
@endFrame
A=M-D;
D=M;
@THIS
M=D;
@3
D=A;
@endFrame
A=M-D;
D=M;
@ARG
M=D;
@4
D=A;
@endFrame
A=M-D;
D=M;
@LCL
M=D;
@retAddr
A=M;
0;JMP
//function Class2.get 0
(StaticsTest.Class2.get)
//push static 0
@Class2.vm.0
D=M;
@SP
M=M+1;
A=M-1;
M=D;
//push static 1
@Class2.vm.1
D=M;
@SP
M=M+1;
A=M-1;
M=D;
//sub
@SP
M=M-1;
A=M;
D=M;
@SP
M=M-1;
A=M;
M=M-D;
@SP
M=M+1;
//return
@LCL
D=M;
@endFrame
M=D;
@5
D=A;
@endFrame
A=M-D;
D=M;
@retAddr
M=D;
@SP
M=M-1;
A=M;
D=M;
@ARG
A=M;
M=D;
@ARG
D=M+1;
@SP
M=D;
@endFrame
A=M-1;
D=M;
@THAT
M=D;
@2
D=A;
@endFrame
A=M-D;
D=M;
@THIS
M=D;
@3
D=A;
@endFrame
A=M-D;
D=M;
@ARG
M=D;
@4
D=A;
@endFrame
A=M-D;
D=M;
@LCL
M=D;
@retAddr
A=M;
0;JMP
